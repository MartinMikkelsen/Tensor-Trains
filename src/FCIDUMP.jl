"""
    read_electron_integral_tensors(fcidump_filename::String)

Read the one-electron and two-electron tensors from an FCIDUMP file.
This code was specifically written to read FCIDUMP files generated by
Pyscf Package (https://pyscf.org/index.html).

 integrals: <ij,kl>=int g_ij(x1)G(x1,x2)g_kl(x2)dx1dx2 extracted from Pyscf

 Code from SCATensorPack.jl
"""
function read_electron_integral_tensors(fcidump_filename::String)::Tuple{Float64,Int,Int,Array{Float64,2},Array{Float64,4}}

    lines = readlines(fcidump_filename)
    #@assert lines[4] == " /"
    electron_count_match = match(r"NELEC= *([0-9]+)", lines[1])
    electron_count= parse(Int, electron_count_match[1])


    orbital_count_match = match(r"NORB= *([0-9]+)", lines[1])
    orbital_count = parse(Int, orbital_count_match[1])
 
    one_electron_integral_tensor = zeros(orbital_count, orbital_count)

    two_electron_integral_tensor =
        zeros(orbital_count, orbital_count, orbital_count, orbital_count)

    Nuclear_energy=0;
    for line in lines[5:end]

        tokens = split(line)
        value = parse(Float64, tokens[1])
        i = parse(Int, tokens[2])
        j = parse(Int, tokens[3])
        k = parse(Int, tokens[4])
        l = parse(Int, tokens[5])

        if i == j == k == l == 0

            @debug begin
                println("core energy = $value")
            end
            Nuclear_energy=value;

        elseif k == l == 0
            one_electron_integral_tensor[i, j] = one_electron_integral_tensor[j, i] = value

        else

            for indices in Set([(i,j,k,l), (j,i,k,l), (i,j,l,k), (j,i,l,k),
                                (k,l,i,j), (k,l,j,i), (l,k,i,j), (l,k,j,i)])

                @debug begin
                    if two_electron_integral_tensor[indices...] != 0
                        @show line
                    end
                end

                two_electron_integral_tensor[indices...] = value
            end
        end

    end

    return Nuclear_energy, orbital_count,electron_count, one_electron_integral_tensor, two_electron_integral_tensor
end
